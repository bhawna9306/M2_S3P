#include <chrono>
#include <cstdlib>
#include <iostream>
#include <omp.h>

using namespace std::chrono;
using namespace std;

// Function to generate random vector
void randomVector(int vector[], int size) {
    for (int i = 0; i < size; i++) {
        vector[i] = rand() % 100;
    }
}

int main() {
    // Size of the vectors
    unsigned long size = 100000000;

    // Allocate memory for vectors
    int *v1 = (int *)malloc(size * sizeof(int));
    int *v2 = (int *)malloc(size * sizeof(int));
    int *v3 = (int *)malloc(size * sizeof(int));

    // Generate random vectors
    randomVector(v1, size);
    randomVector(v2, size);

    // Shared variable to store the total sum
    int total = 0;

    // Measure execution time for static scheduling with chunk size 1
    auto start = high_resolution_clock::now();
    #pragma omp parallel default(none) shared(v1, v2, v3, size) reduction(+:total)
    {
        #pragma omp for schedule(static, 1)
        for (int i = 0; i < size; i++) {
            v3[i] = v1[i] + v2[i];
            total += v3[i];
        }
    }
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by function (static, 1): " << duration.count() << " microseconds" << endl;

    // Reset total
    total = 0;

    // Measure execution time for dynamic scheduling with chunk size 1000
    start = high_resolution_clock::now();
    #pragma omp parallel default(none) shared(v1, v2, v3, size) reduction(+:total)
    {
        #pragma omp for schedule(dynamic, 1000)
        for (int i = 0; i < size; i++) {
            v3[i] = v1[i] + v2[i];
            total += v3[i];
        }
    }
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by function (dynamic, 1000): " << duration.count() << " microseconds" << endl;

    // Reset total
    total = 0;

    // Measure execution time for guided scheduling with chunk size 10000
    start = high_resolution_clock::now();
    #pragma omp parallel default(none) shared(v1, v2, v3, size) reduction(+:total)
    {
        #pragma omp for schedule(guided, 10000)
        for (int i = 0; i < size; i++) {
            v3[i] = v1[i] + v2[i];
            total += v3[i];
        }
    }
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop - start);
    cout << "Time taken by function (guided, 10000): " << duration.count() << " microseconds" << endl;

    // Free memory
    free(v1);
    free(v2);
    free(v3);

    return 0;
}
